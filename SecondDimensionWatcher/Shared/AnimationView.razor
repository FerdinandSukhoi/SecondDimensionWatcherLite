<div class="card" style="margin-bottom: 10px">
    <div class="card-body">
        <h5 class="card-title">@AnimationInfo.Id</h5>
        <p class="card-subtitle mb-2 text-muted">
            <i class="bi bi-clock"></i>&nbsp;发布时间：@AnimationInfo.PublishTime.ToString("f")
        </p>

        @if (AnimationInfo.IsTracked)
        {
            <Progress Class="@ProgressClass" Value="@ProgressValue"></Progress>
        }

        @switch (Status)
        {
            case TorrentStatus.UnTracked:
                <button type="button" @onclick="@(async () => await Download())" class="btn btn-primary">添加到下载队列</button>
                break;
            case TorrentStatus.Running:
                <p class="card-text">
                    <i class="bi bi-clock"></i>&nbsp;剩余时间: @RemainTimeString&nbsp;
                    <i class="bi bi-download"></i>下载速度: @SpeedString&nbsp;
                </p>
                <button type="button" @onclick="@(async () => await Pause())" class="btn btn-warning"><i class="bi bi-pause-fill"></i>&nbsp;暂停</button>
                break;
            case TorrentStatus.Paused:
                <p class="card-text"><i class="bi bi-pause-circle"></i>&nbsp;暂停中</p>
                <button type="button" @onclick="@(async () => await Resume())" class="btn btn-success"><i class="bi bi-play-fill"></i>&nbsp;恢复</button>
                break;
            case TorrentStatus.Finished:
                <p class="card-text">已完成</p>
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    </div>
</div>