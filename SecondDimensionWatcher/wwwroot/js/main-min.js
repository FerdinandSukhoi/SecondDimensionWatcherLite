const RootComponent={data:()=>({remoteList:[],localList:[],selector:"remote",scrolledToBottom:!1,isLoading:!0,processing:!1}),methods:{async calculateBottom(){if(!0===Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop)+window.innerHeight>=.98*document.documentElement.offsetHeight&&!1===this.processing){if(this.processing=!0,"remote"!==this.selector){const t=await fetch(`/api/Feed/Tracked?after=${this.localList.length}`),e=await t.json();Array.prototype.push.apply(this.localList,e)}else{const t=await fetch(`/api/Feed/UnTracked?after=${this.remoteList.length}`),e=await t.json();Array.prototype.push.apply(this.remoteList,e)}this.processing=!1}},async setSelector(t){if(this.selector=t,"remote"!==t&&0===this.localList.length){this.isLoading=!0;const t=await fetch("/api/Feed/Tracked");this.localList=await t.json(),this.isLoading=!1}},async forceReload(){await fetch("/api/Feed/Refresh"),window.location.reload(!1)}},async mounted(){const t=await fetch("/api/Feed/UnTracked");this.remoteList=await t.json(),this.isLoading=!1,await this.calculateBottom(),window.onscroll=(async()=>{await this.calculateBottom()})}},app=Vue.createApp(RootComponent);app.component("animation-view",{data:()=>({connection:null,info:{},progress:"width: 0%",isFinished:!1,isPaused:!1,isError:!1,isRunning:!1}),props:["animation","selector"],template:"#animation-view",methods:{async pause(){await fetch(`/api/Torrent/Pause/${encodeURIComponent(this.animation.hash)}`)},async resume(){await fetch(`/api/Torrent/Resume/${encodeURIComponent(this.animation.hash)}`)},canShow(){return"remote"===this.selector?!1===this.animation.isTracked:"local"===this.selector?!0===this.animation.isTracked:"downloading"===this.selector?!0===this.isRunning:"paused"===this.selector?!0===this.isPaused:"finished"===this.selector&&!0===this.isFinished},async beginDownload(){await fetch(`/api/Torrent/Download/${encodeURIComponent(this.animation.id)}`),this.animation.isTracked=!0,await this.beginTrack()},printInfo(){console.log(this.animation.id)},async beginTrack(){const t=new URL(`/api/Torrent/Query/${this.animation.hash}`,window.location.href);t.protocol=t.protocol.replace("http","ws"),this.connection=new WebSocket(t.href),this.connection.onmessage=(t=>{this.info=JSON.parse(t.data)[0],this.progress=`width: ${parseFloat(100*this.info.Progress).toFixed(2)}%`,this.isFinished="uploading"===this.info.State||this.info.State.includes("UP"),this.isPaused="pausedDL"===this.info.State||"checkingResumeData"===this.info.State,this.isError="error"===this.info.State||"unknown"===this.info.State||"missingFiles"===this.info.State,this.isRunning="downloading"===this.info.State||this.info.State.includes("DL")&&"pausedDL"!==this.info.State,this.isFinished&&this.connection.close()})}},async mounted(){!0===this.animation.isTracked&&await this.beginTrack()},beforeUnmount(){null!==this.connection&&this.connection.close()}}),app.component("breadcrumb-items",{props:["name"],template:"#breadcrumb-items"}),app.component("folder-detail",{props:["name","parent"],template:"#folder-detail",methods:{async navigateToThis(){await this.parent.goNextRoute(this.name)}}}),app.component("file-detail",{props:["name","relativePath","hash"],template:"#file-detail",methods:{playOnline(){window.open(`/PlayBack/?hash=${this.hash}&path=${encodeURIComponent(this.relativePath+"/"+this.name)}`,"_blank").focus()},downloadFile(){window.open(`/api/Torrent/File/${this.hash}?relativePath=${encodeURIComponent(this.relativePath+"/"+this.name)}`,"_blank")}}}),app.component("file-view",{data:()=>({pastRoutes:[],currentRoute:".",folders:[],files:[]}),methods:{displayRouteName(t){return"."===t?this.name:t},async goNextRoute(t){".."===t?this.currentRoute=this.pastRoutes.pop():(this.pastRoutes.push(this.currentRoute),this.currentRoute=t),await this.updateData()},buildUpRoute(){return"."===this.currentRoute?".":this.pastRoutes.join("/")+`/${currentRoute}`},async updateData(){const t=await fetch(`/api/Torrent/DirectoryName/${this.hash}?relativePath=encodeURIComponent${this.buildUpRoute()}`),e=await fetch(`/api/Torrent/FileName/${this.hash}?relativePath=${this.buildUpRoute()}`);"."!==this.currentRoute&&(this.folders=[".."].concat(await t.json())),this.files=await e.json()}},props:["name","hash"],template:"#file-view",async mounted(){await this.updateData()}}),app.mount("#app");